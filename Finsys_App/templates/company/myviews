def deliverylist(request):
     
     return render(request,'company/Fin_Delivery_Challan.html')

def newdeliverychallan(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=data)
                cmp = com
                allmodules = Fin_Modules_List.objects.get(Login_Id=s_id, status='New')
                
                cust = Fin_Customers.objects.filter(Company=com, status='Active')
                itms = Fin_Items.objects.filter(Company=com, status='Active')
                units = Fin_Units.objects.filter(Company=com)
                acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com).order_by('account_name')
                lst = Fin_Price_List.objects.filter(Company=com, status='Active')
                
                trms = Fin_Company_Payment_Terms.objects.filter(Company = com)
            else:
                com = Fin_Staff_Details.objects.get(Login_Id=data)
                cmp = com
                allmodules = Fin_Modules_List.objects.get(company_id=com.company_id, status='New')
                
                cust = Fin_Customers.objects.filter(Company=com.company_id, status='Active')
                itms = Fin_Items.objects.filter(Company=com.company_id, status='Active')
                units = Fin_Units.objects.filter(Company=com.company_id)
                acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com.company_id).order_by('account_name')
                lst = Fin_Price_List.objects.filter(Company=com.company_id, status='Active')
                
                trms = Fin_Company_Payment_Terms.objects.filter(Company = com.company_id)


            # latest_eway = Fin_Ewaybills.objects.filter(Company=com).order_by('-Ewaybill_No').first()

            # new_number = int(latest_eway.ReferenceNumber) + 1 if latest_eway else 1

            # if Fin_Eway_Reference.objects.filter(Company=com).exists():
            #     deleted = Fin_Eway_Reference.objects.get(Company=com)
                
            #     if deleted:
            #         while int(deleted.reference_no) >= new_number:
            #             new_number += 1

            # nxtEway = ""
            # lastEway = Fin_Ewaybills.objects.filter(Company=com).last()
            # if lastEway:
            #     eway_no = str(lastEway.Ewaybill_No)
            #     numbers = []
            #     stri = []
            #     for word in eway_no:
            #         if word.isdigit():
            #             numbers.append(word)
            #         else:
            #             stri.append(word)

            #     num = ''.join(numbers)
            #     st = ''.join(stri)

            #     eway_num = int(num) + 1

            #     if num[0] == '0':
            #         nxtEway = st + '0' + str(eway_num)
            #     else:
            #         nxtEway = st + str(eway_num)

            context = {
                'com': cmp,
                'LoginDetails': data,
                'allmodules': allmodules,
                'data': data,
                
                'customers': cust,
                'items': itms,
                'lst': lst,
              
                'pTerms':trms,
                'accounts':acc,
                'units':units
            }
            return render(request, 'company/Fin_add_delivery_challan.html', context)
        except Fin_Login_Details.DoesNotExist:
            return redirect('/')
    return redirect('newdeliverychallan')
    


def Fin_getCustomerschallan(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        options = {}
        option_objects = Fin_Customers.objects.filter(Company = com, status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')
    

def Fin_createchallanCustomer(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        fName = request.POST['first_name']
        lName = request.POST['last_name']
        gstIn = request.POST['gstin']
        pan = request.POST['pan_no']
        email = request.POST['email']
        phn = request.POST['mobile']

        if Fin_Customers.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
            res = f"Customer `{fName} {lName}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif gstIn != "" and Fin_Customers.objects.filter(Company = com, gstin__iexact = gstIn).exists():
            res = f"GSTIN `{gstIn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, pan_no__iexact = pan).exists():
            res = f"PAN No `{pan}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, mobile__iexact = phn).exists():
            res = f"Phone Number `{phn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, email__iexact = email).exists():
            res = f"Email `{email}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})

        cust = Fin_Customers(
            Company = com,
            LoginDetails = data,
            title = request.POST['title'],
            first_name = fName,
            last_name = lName,
            company = request.POST['company_name'],
            location = request.POST['location'],
            place_of_supply = request.POST['place_of_supply'],
            gst_type = request.POST['gst_type'],
            gstin = None if request.POST['gst_type'] == "Unregistered Business" or request.POST['gst_type'] == 'Overseas' or request.POST['gst_type'] == 'Consumer' else gstIn,
            pan_no = pan,
            email = email,
            mobile = phn,
            website = request.POST['website'],
            price_list = None if request.POST['price_list'] ==  "" else Fin_Price_List.objects.get(id = request.POST['price_list']),
            payment_terms = None if request.POST['payment_terms'] == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_terms']),
            opening_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            open_balance_type = request.POST['balance_type'],
            current_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            credit_limit = 0 if request.POST['credit_limit'] == "" else float(request.POST['credit_limit']),
            billing_street = request.POST['street'],
            billing_city = request.POST['city'],
            billing_state = request.POST['state'],
            billing_pincode = request.POST['pincode'],
            billing_country = request.POST['country'],
            ship_street = request.POST['shipstreet'],
            ship_city = request.POST['shipcity'],
            ship_state = request.POST['shipstate'],
            ship_pincode = request.POST['shippincode'],
            ship_country = request.POST['shipcountry'],
            status = 'Active'
        )
        cust.save()

        #save transaction

        Fin_Customers_History.objects.create(
            Company = com,
            LoginDetails = data,
            customer = cust,
            action = 'Created'
        )

        return JsonResponse({'status': True})
    
    else:
        return redirect('/')
 

def customerdata(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        customer_id = request.GET.get('id')
        print(customer_id)
        cust = Fin_Customers.objects.get(id=customer_id,Company_id=com.id)
        print('h')
        data7 = {'email': cust.email,'billing_street':cust.billing_street,'billing_city':cust.billing_city,'billing_state':cust.billing_state,'gst_type':cust.gst_type,'gstin':cust.gstin,'place_of_supply':cust.place_of_supply}
        return JsonResponse(data7)

      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        customer_id = request.GET.get('id')
        cust = Fin_Customers.objects.get(id=customer_id,Company_id=staf.company_id_id)
        data7 = {'email': cust.email,'billing_street':cust.billing_street,'billing_city':cust.billing_city,'billing_state':cust.billing_state,'gst_type':cust.gst_type,'gstin':cust.gstin,'place_of_supply':cust.place_of_supply,}
        return JsonResponse(data7)


